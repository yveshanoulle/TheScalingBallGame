## The DevOps Ball point game  {#TheDevOpsBallPointGame}

This is the [DevOps version of the original ballpoint game](https://twitter.com/johnC_bristol/status/398222616978157568). It was designed by [John Clapham](https://twitter.com/johnC_bristol) to use for the Experience DevOps workshop that he ran together with [Matthew Skelton](https://twitter.com/matthewpskelton) and [James Betteley](https://twitter.com/jamesbetteley).

John wanted players and observers to feel the effects of interrupted an uninterrupted flow, and he wanted constraints on throughput.

As for the orginal ballpoint game, the objective is to pass as many balls as possible through the team. But as opposed to the original ballpoint, the person introducing the ball in the system is not the last person to touch the ball. You earn a ball point each time a ball is dropped in a paper cup.

John added some modifications to the original game:

- Team Growth: The game starts with 3 players, you might think of them as the founders. At each iteration more players are added as the business is growing. Here the game shows how flow gets interrupted as more people join an organisation.
- Silos: The game shows how flow gets interrupted with unchecked/unmanaged growth when organisational, cultural or geographical separation is introduced. DevOps calls this the [wall of confusion](http://dev2ops.org/2010/02/what-is-devops/). During the game this is realised with a physical wall forcing only one touch point between teams, and limited visibility.
- Incentives: As is usual for classic organisations to give different incentives to different departments, we give during the game competing incentives to teams on either side of the wall of confusion.
- Contstrained Throughput: The game adds a constrained to the throughput of the system. The players need to consider downstream flow like is the most of the time the case in classic organisations between development teams and test and/or operations teams. This is analoguous with planning and executing manual regression tests or planning and configuring new IT systems. For the game we use paper cups to receive the balls. Each cup has capacity - 2 balls or more - and a cost - 10 seconds notice to spin up. If a cup is not ready, the team has 2 options: either wait for a cup to get ready and the team gets a ballpoint, or drop the ball.
- Start person is not the end person: Because the last person places balls in the cups, and potentially requests more balls, it is not practical to have that same person as start and end point.

### Number of Participants

I've played the game ranging from 6 to 20 players.

6 is too few to simulate the effects of flow inside a big organisation. Starting from 10 you get good results. 20 is fun, but a lot to facilitate on your own.

I've always facilitated the DevOps Ball point game alone. My feeling is that facilitating in pair would be better because there is a lot observe. And there are the metrics to keep track of.

### Materials

* You need something to create a wall: this can be 2 flipcharts, a whiteboard, a projection screen. I once had in a meeting room office space dividers which are great for this.
* A decent amount of balls. Far more than for the original ballpoint game. I have a set of 120 balls. This seems enough.
* Paper cups that can contain at least 2 balls. For paper cups that can contain 2 balls, you need 60 paper cups. If they can contain more balls, you need less cups.
* a flipchart or whiteboard to record the number of balls passed through the team at each iteration of the game.

### The Rules

* Each ball must have air-time
* Each ball must be touched at least once by every team member
* No passing of the ball to your direct neighbour.
* Start person is *NOT* the end person (as opposed to the original ballpoint game).
* End point is a paper cup, which has a capacity (2 balls or more) and a cost (10 seconds to spin up). If the a cup is not ready, the team can either wait for a cup to get ready and gets a ballpoint, or drop the ball.
* Two minutes per iteration.
* One minute for continuous improvement.

For clarity and transparency, it is good to have these rules projected or written down on a flipchart or whiteboard before hand.

### The Game

This playbook is targeted to a team of 14 people inside an IT organisation.

#### Iteration 1 - Founders

3 people play the game demonstrating how it works for everyone in the room.

#### Iteration 2 - Startup

Grow the team to 6 people and play the game.

_question: should we hold a retrospective after iteration 1 and 2 ?_
> Typically no, these iterations are just about establishing the story and showing people how to play the game.

#### Iteration 3 - Growing Pains

Form 2 teams of 7 people each keeping the founders in the same team:

* an upstream team, consider it as Development
* a downstream team, consider it as Operations

Whenever a paper cup is full, Operations needs to bring in a new paper cup.

Add the Wall of Confusion: teams can only pass the ball to each other through one touch point.

![Wall of Confusion](http://dev2ops.org/wp-content/uploads/2010/02/WallOfConfusion_Release.png)

_question: should we use a paper cup as touch point ?_
> That's an interesting idea - making it harder to cross the wall would reinforce the damage of the bottle neck.  My guess is that this would confuse people because cups would have two purposes (servers at the end of the line, and at the wall), practically it might also be too hard - the wall shouldn't make play stop all together.

Play the game.

Hold separate retrospectives. Teams are discouraged to have cross team communications.

#### Iteration 4 - Incentives

Development aims to pass as many balls as possible. Operations aims not to drop a single ball.

Play the game.

Hold separate retrospectives. Again teams are discouraged to have cross team communications.

_question: at this point shouldn't the teams have a joined retrospective to prepare for the following iteration ?_
>The aim is is to get the teams realise how damaging the wrong incentives are by encouraging them to optimise for the team's goals rather than the organisation.  As such I'd recommend they retro separately, the act of either a)thinking up even more destructive habits or b)releasing they need to join up, should reinforce learning.

#### Iteration 5 - Joined up incentives

Incentives are now joined for both teams: pass as many balls as possible without dropping a single ball.

Play the game.

Hold a joined retrospective.

#### Iteration 6 - Flow

Remove the wall. Remind the people of the feeling of uninterrupted flow.

Play the game.

### Reference

* [DevOps Ball Point](https://johnclapham.wordpress.com/2013/11/06/the-devops-ball-point/)

### Acknowledgment

[John Clapham](https://twitter.com/johnC_bristol) for publishing this variant and taking the time to answer all of my questions.
